# --- clang-format ---
CODE_STYLE = clang-format --style="{InsertBraces: true, InsertNewlineAtEOF: true, CommentPragmas: Insert, BasedOnStyle: Google}"
FMT_FILES = find ./ \
	-name '*.cpp' -not -path './googletest/*' -print0 -or \
	-name '*.hpp' -not -path './googletest/*' -print0

# --- Targets ---
.PHONY: cppcheck clean_gcov clean_runner doxydoc fmtcheck fmt submodules gcov_report leaks valgrind

clean_gcov:
	find . -name "*.o" -or -name "*.gcda" -or -name "*.gcno" -or -name "*.info" | xargs rm -f
	rm -rf $(GCOV_REPORT_DIR)/ 

clean_runner:
	rm -f $(TEST_RUNNER)

cppcheck:		## Start static code analyzing
	cppcheck --enable=all --suppress=missingIncludeSystem .

doxydoc:		## Generate documentation with Doxygen
	doxygen Doxyfile

fmtcheck:		## Check formatting code
	$(FMT_FILES) | xargs -0 $(CODE_STYLE) -n 

fmt:		## Start formatting code
	$(FMT_FILES) | xargs -0 $(CODE_STYLE) -i

submodules:		## Update submodules
	git submodule update --init --recursive

gcov_report:	CXXFLAGS += --coverage
gcov_report:	clean_gcov		## Generate gcov report (only gcc compiler)
	@if [ "$(CXX)" = "clang++" ]; then \
		echo "Bug: Gcov report is not supported by the Clang compiler. Use GCC instead."; \
		exit 1; \
	fi
	$(MAKE) "$(TEST_RUNNER)" CXXFLAGS+="$(CXXFLAGS)"
	./$(TEST_RUNNER)
	lcov -c --directory ./ -o report.info --exclude "$(TEST_DIR)/*" --exclude "googletest/*"
	lcov --extract report.info \
    	'*s21_matrix_oop.hpp' \
    	'*s21_matrix_oop.cpp' \
    	-o important_report.info
	genhtml -o $(GCOV_REPORT_DIR) important_report.info

leaks_test:	$(TEST_RUNNER)		## Check leaks on BSD Unix
	leaks --atExit -- ./$(TEST_RUNNER)

valgrind_test:	$(TEST_RUNNER)		## Check leaks on Linux
	valgrind --tool=memcheck --leak-check=yes ./$(TEST_RUNNER)
